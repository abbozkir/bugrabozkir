{
  "SignalChart": {
    "need": "The challenge was to display a 3-dimensional dataset on a chart while allowing users to select and highlight individual points. The charting library (Chart.js) did not support customizing individual points, which was necessary to keep styles consistent and add extra information. Highlighting selected points was also a requirement. Additionally, the data format from the server differed from what the charting library accepted.",
    "solution": "To solve this, each unique data value was mapped to a separate dataset, using axis conversion to ensure accurate x-y positioning. This made it possible to show all three dimensions of data. A separate dataset was added for highlighting, containing a single point that moves dynamically to highlight the selected item. The data manipulation and state management were adjusted to handle the serverâ€™s data structure and align it with the chart requirements.",
    "usage": "Users can select a satellite from the chart or a list. The selected satellite is highlighted on the chart, and detailed information about the satellite, tower, and signal quality is shown below."
  },
  "WeatherChart": {
    "need": "The challenge was to allow users to add comments to specific points on a chart, displayed as small balloons. Aligning the comments with the correct points and customizing the point styles added complexity.",
    "solution": "A new dataset was added to manage comments. This dataset uses a scatter plot format to handle multiple points at the same x-axis position. Comments are stored within points across all datasets, requiring detailed data processing. The implementation ensures proper alignment of comments and points.",
    "usage": "Click on a point with a balloon to view or remove a comment, or click on a blank point to add a comment."
  },
  "DevelopmentPlanning": {
    "need": "The requirement was a planning tool that supports combining tasks from various sources while maintaining their order. It needed to synchronize a multiselect feature with a data table. Deselected jobs should disappear from the table, and removing a job from the table should deselect it.",
    "solution": "State management was used to link the multiselect feature with the data table. Custom templates were added to enhance table visuals. Combined jobs were displayed with distinct styles to make them easy to identify.",
    "usage": "Select tickets for a team and combine them by using the checkboxes. Adjust the estimated times to see how calculations change. Remove or re-add tickets to observe changes. Use the 'Add' button to group tickets and calculate the minimum estimated time for each group."
  },
  "GamePlanning": {
    "need": "The requirement was to allow users to add rows multiple times, edit their values, reuse rows, and delete rows when needed.",
    "solution": "A child component was created to represent rows, with callback functions managing value changes. If users add a row from a previously created one, it replaces an empty row or adds a new row. A custom combobox was implemented for color selection, offering predefined and custom options. Saved rows are added to the list of previously added rows. Blank rows are ignored during the 'play' action, and the results are displayed with custom styling.",
    "usage": "Click 'Add New Team' to add a row, edit its attributes, and select a color. Add rows from the list of previously created ones. Once all teams are ready, press 'Play' to display the results."
  }
}