{
  "SignalChart": "import React, {useEffect, useRef, useState} from 'react';\nimport {Chart} from 'primereact/chart';\nimport {ListBox} from 'primereact/listbox';\nimport {InputText} from 'primereact/inputtext';\nimport {Knob} from 'primereact/knob';\nimport {ShowcaseService} from '@/service/ShowcaseService';\n\nconst SignalChart = () => {\n    const chartRef = useRef();\n    const chartOptions = {\n        maintainAspectRatio: false,\n        animation: false,\n        indexAxis: 'y',\n        scales: {\n            x: {\n                min: 0,\n                max: 100,\n                type: 'linear',\n                position: 'bottom',\n                grid: {\n                    color: '#3f4b5b'\n                }\n            },\n            y: {\n                grid: {\n                    color: '#3f4b5b'\n                }\n            }\n        },\n        plugins: {\n            legend: {\n                display: false,\n            }\n        },\n        onClick: (event, item) => {\n            if (item.length > 0) {\n                setSelectedSignal({\n                    satelliteName: satelliteList[item[0].index],\n                    towerId: item[0].datasetIndex + 1,\n                    signalQuality: signalDatasets[item[0].datasetIndex].data[item[0].index],\n                    label: `${satelliteList[item[0].index]}#${item[0].datasetIndex + 1}`,\n                });\n            }\n        }\n    };\n\n    const [selectedSignal, setSelectedSignal] = useState({\n        satelliteName: null,\n        towerId: null,\n        label: null\n    });\n    const [satelliteInfo, setSatelliteInfo] = useState({});\n    const [listBoxOptions, setListBoxOptions] = useState([]);\n    const [signalDatasets, setSignalDatasets] = useState([]);\n    const [satelliteList, setSatelliteList] = useState([]);\n    const [highlightDataset, setHighlightDataset] = useState({});\n    const [selectedSignalDetails, setSelectedSignalDetails] = useState([]);\n\n    useEffect(() => {\n        initiateSatelliteInfo();\n        initiateSatelliteSignalData();\n    }, []);\n\n    useEffect(() => {\n        let satSelection = [];\n        satSelection[0] = 150;\n\n        const highlightImage = new Image(40, 40);\n        highlightImage.src = `/images/chart/selection.png`;\n\n        if (selectedSignal.satelliteName) {\n            const satIndex = satelliteList.findIndex((satName) => satName === selectedSignal.satelliteName);\n            satSelection[satIndex] = selectedSignal.signalQuality;\n        }\n\n        setHighlightDataset({\n            pointStyle: highlightImage,\n            showLine: false,\n            radius: 10,\n            hoverRadius: 20,\n            label: 'Selected Signal',\n            data: satSelection,\n            backgroundColor: '#FFD54F'\n        });\n    }, [selectedSignal]);\n\n    useEffect(() => {\n        if (selectedSignal.satelliteName) {\n            setSelectedSignalDetails({\n                satelliteName: selectedSignal.satelliteName,\n                towerId: selectedSignal.towerId,\n                signalQuality: selectedSignal.signalQuality,\n                dimensions: satelliteInfo.satelliteAttributes[selectedSignal.satelliteName].dimensions,\n                perigeeAltitude: satelliteInfo.satelliteAttributes[selectedSignal.satelliteName].perigeeAltitude,\n                apogeeAltitude: satelliteInfo.satelliteAttributes[selectedSignal.satelliteName].apogeeAltitude,\n                city: satelliteInfo.towerAttributes[selectedSignal.towerId - 1].city,\n                latitude: Math.abs(satelliteInfo.towerAttributes[selectedSignal.towerId - 1].latitude),\n                latitudePole:\n                    satelliteInfo.towerAttributes[selectedSignal.towerId - 1].latitude > 0 ? '째 N' : '째 S',\n                longitude: Math.abs(satelliteInfo.towerAttributes[selectedSignal.towerId - 1].longitude),\n                longitudeHemisphere:\n                    satelliteInfo.towerAttributes[selectedSignal.towerId - 1].longitude > 0 ? '째 E' : '째 W',\n            });\n        }\n    }, [selectedSignal]);\n\n    const initiateSatelliteInfo = () => {\n        ShowcaseService.fetchSatelliteInformation()\n            .then(data => {\n                setSatelliteInfo(data);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    };\n\n    const initiateSatelliteSignalData = () => {\n        ShowcaseService.fetchSatelliteSignalData()\n            .then(data => {\n                let towerCount = 0;\n                let listBoxOptions = [];\n                let satList = [];\n                let datasets = [];\n\n                data.forEach(satellite => {\n                    satellite.signals.forEach(signal => {\n                        towerCount = Math.max(towerCount, signal.towerId);\n                    });\n                    satList.push(satellite.satelliteName);\n                });\n\n                for (let i = 0; i < towerCount; i++) {\n                    let datasetsData = [];\n                    satList.forEach(currentSatName => {\n                        const signal = data\n                            .find(satellite => satellite.satelliteName === currentSatName).signals\n                            .find(signal => signal.towerId === i + 1);\n\n                        datasetsData.push(signal ? signal.signalQuality : null);\n                    });\n\n                    datasets.push({\n                        data: datasetsData,\n                    });\n                }\n\n                for (let i = 0; i < towerCount; i++) {\n                    let img = new Image(24, 24);\n                    img.src = '/images/chart/base.png';\n                    let pointStyle = img;\n\n                    if (i < 16) {\n                        img = new Image(24, 24);\n                        img.src = `/images/chart/${i + 1}.png`;\n                        pointStyle = img;\n                    }\n\n                    datasets[i] = {\n                        ...datasets[i],\n                        type: 'scatter',\n                        radius: 10,\n                        hoverRadius: 10,\n                        label: i + 1,\n                        backgroundColor: 'white',\n                        pointStyle: pointStyle\n                    };\n                }\n\n                data.forEach(satellite => {\n                    satellite.signals.forEach(signal => {\n                        listBoxOptions.push({\n                            label: `${satellite.satelliteName}#${signal.towerId}`,\n                            satelliteName: satellite.satelliteName,\n                            signalQuality: signal.signalQuality,\n                            towerId: signal.towerId\n                        });\n                    });\n                });\n\n                setSatelliteList(satList);\n                setSignalDatasets(datasets);\n                setListBoxOptions(listBoxOptions);\n                chartRef.current.refresh();\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    };\n\n    const sensorTrackEntryTemplate = (satelliteData) => {\n        return (\n            <div className=\"grid\">\n                <div className=\"col-7 flex align-items-center\">\n                    <span className=\"vertical-align-middle font-bold text-xl\">{satelliteData.satelliteName}</span>\n                </div>\n                <div className=\"col-5 flex align-items-center justify-content-end\">\n                    <img\n                        src={satelliteData.towerId < 16 ? `/images/chart/${satelliteData.towerId}.png` : '/images/chart/base.png'}\n                        width={32}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"grid p-fluid\">\n            <div className=\"col-12 md:col-10\">\n                <Chart\n                    style={{height: '600px'}}\n                    type=\"line\"\n                    data={{\n                        labels: satelliteList,\n                        datasets: [...signalDatasets, highlightDataset],\n                    }}\n                    options={chartOptions}\n                    ref={chartRef}\n                />\n                <div className=\"grid\">\n                    <div className=\"col-12 md:col-4\">\n                        <div className=\"border-1 border-50 border-round flex justify-content-between p-3\">\n                            <div className=\"w-full\">\n                                <span className=\"block text-500 font-medium mb-3 text-2xl\">Satellite</span>\n                                <div className=\"p-inputgroup mt-3\">\n                                    <span className=\"p-inputgroup-addon w-10rem\">Satellite Name</span>\n                                    <InputText\n                                        value={selectedSignalDetails && selectedSignalDetails.satelliteName}\n                                        disabled={true}\n                                    />\n                                </div>\n                                <div className=\"p-inputgroup mt-3\">\n                                    <span className=\"p-inputgroup-addon w-10rem\">Dimensions</span>\n                                    <InputText\n                                        value={selectedSignalDetails && selectedSignalDetails.dimensions}\n                                        disabled={true}\n                                    />\n                                    <span className=\"p-inputgroup-addon\">cm</span>\n                                </div>\n                                <div className=\"p-inputgroup mt-3\">\n                                    <span className=\"p-inputgroup-addon w-10rem\">Perigee Altitude</span>\n                                    <InputText\n                                        value={selectedSignalDetails && selectedSignalDetails.perigeeAltitude}\n                                        disabled={true}\n                                    />\n                                    <span className=\"p-inputgroup-addon\">km</span>\n                                </div>\n                                <div className=\"p-inputgroup mt-3\">\n                                    <span className=\"p-inputgroup-addon w-10rem\">Apogee Altitude</span>\n                                    <InputText\n                                        value={selectedSignalDetails && selectedSignalDetails.apogeeAltitude}\n                                        disabled={true}\n                                    />\n                                    <span className=\"p-inputgroup-addon\">km</span>\n                                </div>\n                            </div>\n                            <div className=\"flex align-items-center justify-content-center bg-primary border-round\"\n                                 style={{width: '2.5rem', height: '2.5rem'}}>\n                                <i className=\"fa-solid fa-satellite primary-text text-2xl\"></i>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-12 md:col-4\">\n                        <div className=\"border-1 border-50 border-round flex justify-content-between p-3\">\n                            <div className=\"w-full\">\n                                <span className=\"block text-500 font-medium mb-3 text-2xl\">Tower</span>\n                                <div className=\"p-inputgroup mt-3\">\n                                    <span className=\"p-inputgroup-addon w-10rem\">Tower Number</span>\n                                    <InputText\n                                        value={selectedSignalDetails && selectedSignalDetails.towerId}\n                                        disabled={true}\n                                    />\n                                </div>\n                                <div className=\"p-inputgroup mt-3\">\n                                    <span className=\"p-inputgroup-addon w-10rem\">City</span>\n                                    <InputText\n                                        value={selectedSignalDetails && selectedSignalDetails.city}\n                                        disabled={true}\n                                    />\n                                </div>\n                                <div className=\"p-inputgroup mt-3\">\n                                    <span className=\"p-inputgroup-addon w-10rem\">Latitude</span>\n                                    <InputText\n                                        value={selectedSignalDetails && selectedSignalDetails.latitude}\n                                        disabled={true}\n                                    />\n                                    <span\n                                        className=\"p-inputgroup-addon\">{selectedSignalDetails ? selectedSignalDetails.latitudePole : '째 N'}</span>\n                                </div>\n                                <div className=\"p-inputgroup mt-3\">\n                                    <span className=\"p-inputgroup-addon w-10rem\">Longitude</span>\n                                    <InputText\n                                        value={selectedSignalDetails && selectedSignalDetails.longitude}\n                                        disabled={true}\n                                    />\n                                    <span\n                                        className=\"p-inputgroup-addon\">{selectedSignalDetails ? selectedSignalDetails.longitudeHemisphere : '째 E'}</span>\n                                </div>\n                            </div>\n                            <div className=\"flex align-items-center justify-content-center bg-primary border-round\"\n                                 style={{width: '2.5rem', height: '2.5rem'}}>\n                                <i className=\"fa-solid fa-tower-cell primary-text text-2xl\"></i>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-12 md:col-4\">\n                        <div className=\"border-1 border-50 border-round flex justify-content-between p-3\">\n                            <div className=\"w-full\">\n                                <span className=\"block text-500 font-medium mb-3 text-2xl\">Signal Quality</span>\n                                <div className=\"w-full text-center \">\n                                    <Knob\n                                        value={selectedSignalDetails && selectedSignalDetails.signalQuality || 0}\n                                        min={0} max={100} strokeWidth={10} size={200} readOnly\n                                        valueColor={selectedSignalDetails &&\n                                            (selectedSignalDetails.signalQuality < 25 ? 'var(--red-300)' :\n                                                    selectedSignalDetails.signalQuality < 75 ?\n                                                        'var(--yellow-300)' : 'var(--green-300)'\n                                            ) || 'var(--green-300)'}\n                                        valueTemplate={'{value}%'}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"flex align-items-center justify-content-center bg-primary border-round\"\n                                 style={{width: '2.5rem', height: '2.5rem'}}>\n                                <i className=\"fa-solid fa-signal primary-text text-2xl\"></i>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-12 md:col-2 mt-4\">\n                <ListBox filter value={selectedSignal} onChange={(e) => {\n                    e.value && setSelectedSignal({\n                        satelliteName: e.value.satelliteName,\n                        towerId: e.value.towerId,\n                        signalQuality: e.value.signalQuality,\n                        label: e.value.label\n                    });\n                }} options={listBoxOptions}\n                         itemTemplate={(option) => sensorTrackEntryTemplate(option)} optionLabel={\"label\"}\n                         className=\"w-full\"/>\n            </div>\n        </div>\n    );\n};\n\nexport default SignalChart;\n",
  "WeatherChart": "import {Chart} from \"primereact/chart\";\nimport {Button} from \"primereact/button\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport {Dialog} from \"primereact/dialog\";\nimport {InputTextarea} from \"primereact/inputtextarea\";\nimport {Toast} from \"primereact/toast\";\nimport {ShowcaseService} from \"@/service/ShowcaseService\";\n\nconst WeatherChart = () => {\n    const toast = useRef();\n    const chartRef = useRef();\n    const [chartLabels, setChartLabels] = useState([]);\n    const [chartDataRaw, setChartDataRaw] = useState({});\n    const [chartNotes, setChartNotes] = useState([]);\n    const [chartData, setChartData] = useState({});\n    const [noteDialogVisible, setNoteDialogVisible] = useState(false);\n    const [selectedNote, setSelectedNote] = useState(\"\");\n    const [selectedNoteDetails, setSelectedNoteDetails] = useState(undefined);\n    const dataKeys = [\n        \"highestRecord\",\n        \"highestAverage\",\n        \"lowestAverage\",\n        \"lowestRecord\"\n    ];\n    const chartOptions = {\n        maintainAspectRatio: false,\n        pointHitRadius: 5,\n        pointHoverRadius: 5,\n        animation: false,\n        scales: {\n            x: {},\n            y: {\n                max: 50,\n                min: -30\n            }\n        },\n        onClick: (event, element) => {\n            if (event.type === \"click\" && element.length) {\n                setSelectedNoteDetails({\n                    datasetIndex: element[0].datasetIndex,\n                    monthIndex: element[0].index\n                });\n\n                if (element.length > 1) {\n                    setSelectedNote(\n                        chartNotes[element[0].index][dataKeys[element[0].datasetIndex]]\n                    );\n                } else {\n                    setSelectedNote(\"\");\n                }\n\n                setNoteDialogVisible(true);\n            }\n        }\n    };\n\n    useEffect(() => {\n        let labels = [];\n        let temperatureData = {};\n        let noteData = [];\n\n        dataKeys.forEach(key => {\n            temperatureData[key] = [];\n        });\n\n        ShowcaseService.fetchWeatherData()\n            .then(weatherData => {\n                weatherData.forEach(monthWeather => {\n                    labels.push(monthWeather.month);\n                    dataKeys.forEach(key => {\n                        temperatureData[key].push(monthWeather[key]);\n                    });\n                    noteData.push(monthWeather.notes);\n                });\n\n                setChartNotes(noteData);\n                setChartLabels(labels);\n                setChartDataRaw({\n                    chartLabels: labels,\n                    temperatureData: temperatureData,\n                });\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }, []);\n\n    useEffect(() => {\n        let noteLineData = [];\n        chartNotes.forEach((monthNote, index) => {\n            dataKeys.forEach(key => {\n                if (monthNote[key] && monthNote[key].trim() !== '') {\n                    noteLineData.push({\n                        x: chartLabels[index],\n                        y: chartDataRaw.temperatureData[key][index],\n                        note: monthNote[key]\n                    });\n                }\n            });\n        });\n\n        const img = new Image(75, 75);\n        img.src = '/images/chart/note.png';\n\n        const noteDataset = {\n            label: 'Notes',\n            data: noteLineData,\n            type: 'scatter',\n            borderColor: '#8dd0ff',\n            backgroundColor: '#8dd0ff',\n            tension: 0.4,\n            pointStyle: img\n        };\n\n        chartDataRaw.temperatureData &&\n        setChartData({\n            labels: chartDataRaw.chartLabels,\n            datasets: [\n                {\n                    label: 'Highest Record',\n                    data: chartDataRaw.temperatureData[dataKeys[0]],\n                    borderColor: '#bb2d3b',\n                    backgroundColor: '#bb2d3b',\n                    tension: 0.4\n                },\n                {\n                    label: 'Highest Average',\n                    data: chartDataRaw.temperatureData[dataKeys[1]],\n                    borderColor: '#d76b11',\n                    backgroundColor: '#d76b11',\n                    tension: 0.4\n                },\n                {\n                    label: 'Lowest Average',\n                    data: chartDataRaw.temperatureData[dataKeys[2]],\n                    borderColor: '#1bab80',\n                    backgroundColor: '#1bab80',\n                    tension: 0.4\n                },\n                {\n                    label: 'Lowest Record',\n                    data: chartDataRaw.temperatureData[dataKeys[3]],\n                    borderColor: '#5e38a4',\n                    backgroundColor: '#5e38a4',\n                    tension: 0.4\n                },\n                noteDataset\n            ]\n        });\n        chartRef.current.refresh();\n    }, [chartNotes]);\n\n    const saveNote = (noteRemoval) => {\n        setChartNotes(prevNoteList => {\n            let newNoteList = [...prevNoteList];\n            newNoteList[selectedNoteDetails.monthIndex][\n                dataKeys[selectedNoteDetails.datasetIndex]\n                ] = noteRemoval ? '' : selectedNote;\n\n            return newNoteList;\n        });\n\n        toast.current.show({\n            severity: 'success',\n            summary: 'Success',\n            detail: noteRemoval || selectedNote === '' ? 'Message Removed' : 'Message Saved',\n            life: 3000\n        });\n    };\n\n    const removalButtonVisible = selectedNote.trim() !== \"\";\n    const noteDialogTitle =\n        selectedNoteDetails &&\n        `${removalButtonVisible ? 'Edit Note' : 'Add Note'} for \n                    ${\n            chartData.datasets[selectedNoteDetails.datasetIndex].label\n        } on \n                    ${chartLabels[selectedNoteDetails.monthIndex]}`;\n\n    const noteDialogFooter = (\n        <>\n            <Button\n                visible={removalButtonVisible}\n                type=\"button\"\n                label=\"Remove\"\n                icon=\"pi pi-trash\"\n                onClick={() => {\n                    saveNote(true);\n                    setNoteDialogVisible(false);\n                }}\n                text\n            />\n            <Button\n                type=\"button\"\n                label=\"Cancel\"\n                icon=\"pi pi-times\"\n                onClick={() => setNoteDialogVisible(false)}\n                text\n            />\n            <Button\n                type=\"button\"\n                label=\"Save\"\n                icon=\"pi pi-check\"\n                onClick={() => {\n                    saveNote(false);\n                    setNoteDialogVisible(false);\n                }}\n                text\n            />\n        </>\n    );\n\n    return (\n        <div className=\"grid p-fluid\">\n            <Toast ref={toast}/>\n            <div className=\"col-12\">\n                <Chart\n                    type=\"line\"\n                    style={{height: \"600px\"}}\n                    data={chartData}\n                    options={chartOptions}\n                    ref={chartRef}\n                />\n            </div>\n            <Dialog\n                header={noteDialogTitle}\n                visible={noteDialogVisible}\n                position=\"top\"\n                blockScroll\n                onHide={() => setNoteDialogVisible(false)}\n                draggable={false}\n                resizable={false}\n                dismissableMask={true}\n                closeOnEscape={true}\n                footer={noteDialogFooter}\n                closable={false}\n            >\n                <div className=\"grid p-fluid\">\n                    <div className=\"col-12\">\n                        <InputTextarea\n                            rows={5}\n                            cols={30}\n                            value={selectedNote}\n                            autoResize\n                            onChange={(e) => setSelectedNote(e.target.value)}\n                        />\n                    </div>\n                </div>\n            </Dialog>\n        </div>\n    );\n};\n\nexport default WeatherChart;\n",
  "DevelopmentPlanning": "import {Button} from \"primereact/button\";\nimport React, {useEffect, useState} from \"react\";\nimport {Dropdown} from \"primereact/dropdown\";\nimport {MultiSelect} from \"primereact/multiselect\";\nimport {DataTable} from \"primereact/datatable\";\nimport {Column} from \"primereact/column\";\nimport {InputText} from \"primereact/inputtext\";\nimport {Checkbox} from \"primereact/checkbox\";\nimport {Chip} from \"primereact/chip\";\nimport {Card} from \"primereact/card\";\nimport {ShowcaseService} from \"@/service/ShowcaseService\";\n\nconst DevelopmentPlanning = () => {\n    const [selectedTickets, setSelectedTickets] = useState([]);\n    const [selectedTicketsMap, setSelectedTicketsMap] = useState({});\n    const [tickets, setTickets] = useState([]);\n\n    const [team, setTeam] = useState({});\n    const [teams, setTeams] = useState([]);\n    const [plan, setPlan] = useState([]);\n\n    useEffect(() => {\n        ShowcaseService.fetchDevTeamData()\n            .then(teamsData => {\n                teamsData.forEach(team => {\n                    team.label = team.name;\n                });\n\n                setTeams(teamsData);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n\n        ShowcaseService.fetchDevTeamPlanSample()\n            .then(samplePlan => {\n                setPlan(samplePlan);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }, []);\n\n    const addTicket = (ticket) => {\n        setSelectedTickets(prevSelectedTickets => {\n            let newSelectedTickets = [...prevSelectedTickets];\n\n            newSelectedTickets.push({\n                id: ticket.id,\n                team: team,\n                ticketName: ticket.name,\n                ticketLabel: `${ticket.label} (${team.name})`,\n                estimatedTime: ticket.estimatedTime,\n                join: false\n            });\n\n            return newSelectedTickets;\n        });\n    };\n\n    const removeTicket = (ticket) => {\n        setSelectedTickets([...selectedTickets].filter(selectedTicket => (selectedTicket.id !== ticket.id)));\n    };\n\n    const joinBodyTemplate = (rowData, row) => {\n        if (row.rowIndex === 0) {\n            return <div></div>;\n        }\n        return <div style={{textAlign: 'center'}}>\n            <Checkbox tooltip={\"Start at the same time with the ticket above\"} tooltipOptions={{showDelay: 300}}\n                      onChange={e => {\n                          setSelectedTickets(prevSelectedTickets => {\n                              let newSelectedTickets = [...prevSelectedTickets];\n                              newSelectedTickets[row.rowIndex].join = e.checked;\n                              return newSelectedTickets;\n                          });\n                      }} checked={selectedTickets[row.rowIndex].join === true}/>\n        </div>;\n    };\n\n    const estimatedTimeBodyTemplate = (rowData, row) => {\n        return (\n            <div className=\"p-inputgroup\">\n                <InputText size={3} className=\"inputfield w-full\" keyfilter={\"pint\"}\n                           value={selectedTickets[row.rowIndex].estimatedTime}\n                           onChange={(e) => {\n                               setSelectedTickets(prevSelectedTickets => {\n                                   let newSelectedTickets = [...prevSelectedTickets];\n                                   newSelectedTickets[row.rowIndex].estimatedTime = Number.parseInt(e.target.value);\n                                   return newSelectedTickets;\n                               });\n                           }} placeholder={\"time\"}\n                />\n                <span className=\"p-inputgroup-addon\">{\"days\"}</span>\n            </div>\n        );\n    };\n\n    const deleteTicketBodyTemplate = (rowData, row) => {\n        return (\n            <Button className=\"p-button-danger p-button-icon-only\" icon=\"pi pi-trash\" onClick={() => {\n                const deletedTicket = selectedTickets[row.rowIndex];\n                setSelectedTickets(prevSelectedTickets => {\n                    let newSelectedTickets = [...prevSelectedTickets];\n                    newSelectedTickets.splice(row.rowIndex, 1);\n                    return newSelectedTickets;\n                });\n                setSelectedTicketsMap(prevSelectedTicketsMap => {\n                    let newSelectedTicketsMap = {...prevSelectedTicketsMap};\n                    newSelectedTicketsMap[deletedTicket.team.id] = selectedTicketsMap[deletedTicket.team.id]\n                        .filter(item => item.id !== deletedTicket.id);\n                    return newSelectedTicketsMap;\n                });\n            }}/>\n        );\n    };\n\n    const deleteBatchBodyTemplate = (rowData, row) => {\n        return (\n            <Button className=\"p-button-danger p-button-icon-only mr-3\" icon=\"pi pi-trash\" onClick={() => {\n                setPlan(prevPlan => {\n                    let newPlan = [...prevPlan];\n                    newPlan.splice(row.rowIndex, 1);\n                    return newPlan;\n                });\n            }}/>\n        );\n    };\n\n    const addTicketBatch = () => {\n        if (selectedTickets.length === 0) {\n            return;\n        }\n\n        let ticketBatch = [];\n        let ticketGroup = [selectedTickets[0].ticketLabel];\n        let totalEstimatedTime = 0;\n        let currentGroupTime = selectedTickets[0].estimatedTime;\n\n        selectedTickets.forEach((ticket, index) => {\n            if (index === 0) {\n                return;\n            }\n\n            if (ticket.join) {\n                ticketGroup.push(ticket.ticketLabel);\n                currentGroupTime = Math.max(currentGroupTime, ticket.estimatedTime);\n            } else {\n                ticketBatch.push(ticketGroup);\n                totalEstimatedTime += currentGroupTime;\n                ticketGroup = [ticket.ticketLabel];\n                currentGroupTime = ticket.estimatedTime;\n            }\n        });\n\n        ticketBatch.push(ticketGroup);\n        totalEstimatedTime += currentGroupTime;\n\n        setPlan(prevPlan => {\n            let newPlan = [...prevPlan];\n            newPlan.push({\n                ticketBatch: ticketBatch, estimatedTime: totalEstimatedTime\n            });\n\n            return newPlan;\n        });\n    };\n\n    const clearTicketBatch = () => {\n        setSelectedTickets([]);\n        setSelectedTicketsMap([]);\n        setTeam({});\n    };\n\n    const ticketBatchBodyTemplate = (rowData) => {\n        return (\n            <div>\n                {rowData.ticketBatch.map(ticketGroup => {\n                    return (\n                        <div className=\"card p-0 m-1 border-primary-800\">\n                            {ticketGroup.map(ticket => <Chip className=\"m-1 bg-primary font-bold\" label={ticket}/>)}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"grid\">\n            <div className=\"col-12 md:col-6\">\n                <div className=\"grid p-fluid\">\n                    <div className=\"col-12\">\n                        <Card title=\"Tickets\"\n                              subTitle=\"Select Teams and Tickets to create Ticket Batch and add it to the Plan\">\n                            <div className=\"grid justify-content-end\">\n                                <div className=\"col-12 md:col-6\">\n                                    <Dropdown value={team} options={teams} placeholder=\"Select Team\"\n                                              className=\"inputfield w-full\"\n                                              tooltip=\"Add more tickets by selecting other teams\"\n                                              onChange={e => {\n                                                  const team = e.target.value;\n                                                  setTeam(team);\n\n                                                  const ticketsData = [...team.tickets];\n\n                                                  ticketsData.forEach(ticket => {\n                                                      ticket.label = ticket.name;\n                                                  });\n\n                                                  setTickets(ticketsData);\n                                              }}/>\n                                </div>\n                                <div className=\"col-12 md:col-6\">\n                                    <MultiSelect filter showSelectAll={false} value={selectedTicketsMap[team.id]}\n                                                 options={tickets} disabled={!team.name}\n                                                 placeholder=\"Select Ticket(s)\" maxSelectedLabels={3}\n                                                 onChange={(e) => {\n                                                     let newSelectedTicketsMap = {...selectedTicketsMap};\n\n                                                     if (newSelectedTicketsMap[team.id]) {\n                                                         newSelectedTicketsMap[team.id]\n                                                             .find(selectedTicket => selectedTicket.id === e.selectedOption.id) ? removeTicket(e.selectedOption) : addTicket(e.selectedOption);\n                                                     } else {\n                                                         addTicket(e.selectedOption);\n                                                     }\n\n                                                     newSelectedTicketsMap[team.id] = e.target.value;\n                                                     setSelectedTicketsMap(newSelectedTicketsMap);\n                                                 }}/>\n                                </div>\n                                <div className=\"col-12\" hidden={selectedTickets.length < 1}>\n                                    <DataTable value={selectedTickets} size=\"small\"\n                                               onRowReorder={(e) => setSelectedTickets(e.value)}>\n                                        <Column field=\"join\" className=\"text-center\" header=\"Combine Above\"\n                                                style={{width: '10rem'}} body={joinBodyTemplate}></Column>\n                                        <Column field=\"ticketLabel\" header=\"Ticket\"></Column>\n                                        <Column field=\"estimatedTime\" header=\"Estimated Time\"\n                                                style={{width: '10rem'}} body={estimatedTimeBodyTemplate}></Column>\n                                        <Column style={{width: '3rem'}} body={deleteTicketBodyTemplate}></Column>\n                                    </DataTable>\n                                </div>\n                            </div>\n                        </Card>\n                    </div>\n                    <div className=\"col-12 md:col-6\">\n                        <Button label=\"Clear\" className=\"p-button-danger font-bold\" icon=\"pi pi-trash\"\n                                iconPos=\"right\" onClick={clearTicketBatch}/>\n                    </div>\n                    <div className=\"col-12 md:col-6\">\n                        <Button label=\"Add\" className=\"p-button-success font-bold\" icon=\"pi pi-chevron-right\"\n                                iconPos=\"right\" onClick={addTicketBatch}/>\n                    </div>\n                </div>\n\n            </div>\n            <div className=\"col-12 md:col-6\">\n                <Card title=\"Plan\" subTitle=\"Observe the Ticket Batches and remove if necessary\">\n                    <DataTable value={plan}>\n                        <Column field=\"ticketBatch\" header=\"Ticket Batch\" body={ticketBatchBodyTemplate}></Column>\n                        <Column field=\"estimatedTime\" header=\"Minimum Estimated Time\"\n                                style={{width: '10rem', textAlign: 'center', fontWeight: 'bolder'}}></Column>\n                        <Column style={{width: '3em'}} body={deleteBatchBodyTemplate}></Column>\n                    </DataTable>\n                </Card>\n            </div>\n        </div>\n    );\n};\n\nexport default DevelopmentPlanning;\n",
  "GamePlanning": "import {Button} from \"primereact/button\";\nimport React, {useEffect, useState} from \"react\";\nimport {DataTable} from \"primereact/datatable\";\nimport {Column} from \"primereact/column\";\nimport {Card} from \"primereact/card\";\nimport {Dialog} from \"primereact/dialog\";\nimport {TeamDetail} from \"@/components/TeamDetail\";\nimport {ShowcaseService} from \"@/service/ShowcaseService\";\n\nconst GamePlanning = () => {\n    const [previousTeamsDialog, setPreviousTeamsDialog] = useState(false);\n    const [teams, setTeams] = useState([{}]);\n    const [playingTeams, setPlayingTeams] = useState([]);\n    const [previousTeams, setPreviousTeams] = useState([]);\n\n    useEffect(() => {\n        ShowcaseService.fetchGameSample()\n            .then(gameSample => {\n                setPreviousTeams(gameSample);\n                setPlayingTeams(gameSample);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }, []);\n\n    const onTeamDetailsUpdate = (index, field, value) => {\n        setTeams(prevTeams => {\n            let newTeams = [...prevTeams];\n            newTeams[index][field] = value;\n\n            return newTeams;\n        });\n    };\n\n    const onTeamDelete = (index) => {\n        setTeams(prevTeams => {\n            let newTeams = [...prevTeams];\n            newTeams.splice(index, 1);\n            return newTeams;\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Dialog\n                header={'Previous teams'}\n                visible={previousTeamsDialog}\n                resizable={false}\n                draggable={false}\n                dismissableMask={true}\n                onHide={() => setPreviousTeamsDialog(false)}\n            >\n                <div className=\"grid p-fluid\">\n                    <div className=\"col-12\">\n                        <DataTable value={previousTeams} paginator={true} rows={5}>\n                            <Column field=\"teamName\" header={\"Team Name\"}></Column>\n                            <Column field=\"teamSize\" header={\"Team Size\"}></Column>\n                            <Column\n                                field=\"teamColor\"\n                                header=\"Team Color\"\n                                body={team => (\n                                    <div\n                                        style={{\n                                            background: team.teamColor,\n                                            height: '30px',\n                                            borderRadius: '3px',\n                                        }}\n                                    >\n                                        &nbsp;\n                                    </div>\n                                )}\n                            ></Column>\n                            <Column\n                                body={item => (\n                                    <Button\n                                        className=\"p-button-success p-button-icon-only\"\n                                        icon=\"pi pi-plus\"\n                                        onClick={() => {\n                                            setTeams(prevTeams => {\n                                                let newTeams = [...prevTeams];\n                                                item.isCustomTeamColor = (item.teamColor.charAt(0) === '#');\n                                                if (Object.keys(newTeams[newTeams.length - 1]).length === 0) {\n                                                    newTeams[newTeams.length - 1] = item;\n                                                } else {\n                                                    newTeams.push(item);\n                                                }\n\n                                                return newTeams;\n                                            });\n                                            setPreviousTeamsDialog(false);\n                                        }}\n                                    />\n                                )}\n                            />\n                        </DataTable>\n                    </div>\n                </div>\n            </Dialog>\n            <div className=\"grid\">\n                <div className=\"col-12 md:col-6\">\n                    <div className=\"grid p-fluid\">\n                        <div className=\"col-12\">\n                            <Card\n                                title=\"Team Setup\"\n                                subTitle=\"Add your own new teams or select from previous teams to play the game\"\n                            >\n                                <div className=\"grid p-fluid justify-content-end\">\n                                    <div className=\"col-12\">\n                                        {teams.map((item, index) => (\n                                            <TeamDetail\n                                                key={index}\n                                                item={item}\n                                                deletable={teams.length > 1}\n                                                onDelete={() => onTeamDelete(index)}\n                                                onUpdate={(field, value) => onTeamDetailsUpdate(index, field, value)}\n                                            />\n                                        ))}\n                                    </div>\n                                    <div className=\"col-12 md:col-6\">\n                                        <Button\n                                            label={\"Add New Team\"}\n                                            className=\"p-button\"\n                                            icon=\"pi pi-plus\"\n                                            iconPos=\"right\"\n                                            onClick={() => {\n                                                setTeams(prevTeams => ([\n                                                    ...prevTeams,\n                                                    {},\n                                                ]));\n                                            }}\n                                        />\n                                    </div>\n                                    <div className=\"col-12 md:col-6\">\n                                        <Button\n                                            label={\"Select From Previous Teams\"}\n                                            className=\"p-button\"\n                                            icon=\"pi pi-save\"\n                                            iconPos=\"right\"\n                                            onClick={() => {\n                                                setPreviousTeamsDialog(true);\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </Card>\n                        </div>\n                        <div className=\"col-12 md:col-6\">\n                            <Button\n                                label={'Clear'}\n                                className=\"p-button-danger font-bold\"\n                                icon=\"pi pi-trash\"\n                                iconPos=\"right\"\n                                onClick={() => setTeams([{}])}\n                            />\n                        </div>\n                        <div className=\"col-12 md:col-6\">\n                            <Button\n                                label={'Play'}\n                                className=\"p-button-success font-bold\"\n                                icon=\"pi pi-play\"\n                                iconPos=\"right\"\n                                onClick={() => {\n                                    let teamsToPlay = [];\n                                    const currTeams = [...teams];\n\n                                    currTeams.forEach(team => {\n                                        if (\n                                            team.teamName &&\n                                            team.teamSize &&\n                                            team.teamColor\n                                        ) {\n                                            const redundantTeam = teamsToPlay.find(\n                                                teamToPlay => (\n                                                    team.teamName ===\n                                                    teamToPlay.teamName &&\n                                                    team.teamSize ===\n                                                    teamToPlay.teamSize &&\n                                                    team.teamColor ===\n                                                    teamToPlay.teamColor\n                                                )\n                                            );\n\n                                            if (!redundantTeam) {\n                                                teamsToPlay.push(team);\n                                            }\n                                        }\n                                    });\n\n                                    if (teamsToPlay.length > 0) {\n                                        setTeams([{}]);\n                                        setPlayingTeams(teamsToPlay);\n                                        setPreviousTeams(prevPreviousTeams => {\n                                            let newPreviousTeams = [];\n\n                                            teamsToPlay.forEach(teamToPlay => {\n                                                const alreadyAdded = prevPreviousTeams.find(\n                                                    previousTeam => (\n                                                        previousTeam.teamName ===\n                                                        teamToPlay.teamName &&\n                                                        previousTeam.teamSize ===\n                                                        teamToPlay.teamSize &&\n                                                        previousTeam.teamColor ===\n                                                        teamToPlay.teamColor\n                                                    )\n                                                );\n\n                                                if (!alreadyAdded) {\n                                                    newPreviousTeams.push(teamToPlay);\n                                                }\n                                            });\n\n                                            return [\n                                                ...prevPreviousTeams,\n                                                ...newPreviousTeams,\n                                            ];\n                                        });\n                                    }\n                                }}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12 md:col-6\">\n                    <Card\n                        title=\"Game\"\n                        subTitle=\"Observe teams playing in the current game\"\n                    >\n                        <div className=\"grid\">\n                            {playingTeams.map(playingTeam => {\n                                const teamSize = parseInt(\n                                    playingTeam.teamSize\n                                );\n\n                                return (\n                                    <div className=\"col-12 md:col-6\">\n                                        <div\n                                            className=\"card\"\n                                            style={{\n                                                borderColor:\n                                                playingTeam.teamColor,\n                                                borderWidth: \"medium\",\n                                            }}\n                                        >\n                                            <h4>{playingTeam.teamName}</h4>\n                                            <p>{`${teamSize} ${\n                                                teamSize > 1\n                                                    ? 'people'\n                                                    : 'person'\n                                            }`}</p>\n                                        </div>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </Card>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default GamePlanning;\n",
  "TeamDetail": "import React, {useEffect, useState} from 'react';\nimport {Dropdown} from 'primereact/dropdown';\nimport {InputText} from \"primereact/inputtext\";\nimport {Button} from \"primereact/button\";\nimport {ColorPicker} from \"primereact/colorpicker\";\n\nexport const TeamDetail = ({item, deletable, onUpdate, onDelete}) => {\n    const [predefinedColors, setPredefinedColors] = useState([]);\n    const defaultColorPickerColor = '#909090';\n\n    useEffect(() => {\n        const presetColors = [\n            \"var(--red-500)\",\n            \"var(--orange-500)\",\n            \"var(--yellow-500)\",\n            \"var(--green-500)\",\n            \"var(--cyan-500)\",\n            \"var(--blue-500)\",\n            \"var(--purple-500)\",\n            \"var(--pink-500)\"\n        ];\n\n        let colorOptions = [{\n            type: 'custom',\n        }];\n        presetColors.forEach(color => {\n            colorOptions.push({\n                type: 'preset',\n                content: color\n            });\n        });\n\n        setPredefinedColors(colorOptions);\n    }, []);\n\n    return (\n        <div className=\"grid\">\n            <div className=\"col-12 md:col-4\">\n                <InputText className=\"inputfield w-full\"\n                           value={item.teamName ? item.teamName : \"\"}\n                           onChange={(e) =>\n                               onUpdate(\"teamName\", e.target.value)} placeholder={\"Team Name\"}\n                />\n            </div>\n            <div className=\"col-12 md:col-3\">\n                <div className=\"p-inputgroup\">\n                    <InputText className=\"inputfield w-full\" keyfilter=\"pint\"\n                               value={item.teamSize ? item.teamSize : \"\"}\n                               onChange={(e) =>\n                                   onUpdate(\"teamSize\", e.target.value)} placeholder={\"Team Size\"}\n                    />\n                    <span className=\"p-inputgroup-addon\">ppl</span>\n                </div>\n            </div>\n            <div\n                className={`col-${item.isCustomTeamColor ? 11 : 12} md:col-${item.isCustomTeamColor ? 3 : 4}`}>\n                <Dropdown\n                    dropdownIcon={item.isCustomTeamColor ? \"pi pi-arrow-right\" : \"\"}\n                    className=\"inputfield w-full\"\n                    options={predefinedColors}\n                    placeholder={\"Team Color\"}\n                    onChange={(e) => {\n                        if (e.value.type === 'custom') {\n                            onUpdate(\"isCustomTeamColor\", true)\n                            onUpdate(\"teamColor\", defaultColorPickerColor)\n                        } else {\n                            onUpdate(\"isCustomTeamColor\", false)\n                            onUpdate(\"teamColor\", e.value.content)\n                        }\n                    }}\n                    itemTemplate={(rowData) => {\n                        if (rowData.type === 'custom') {\n                            return (<div><p>{\"Custom Color\"}</p></div>)\n                        }\n                        return <div style={{\n                            background: rowData.content,\n                            height: '30px',\n                            marginTop: '-5px',\n                            marginBottom: '-5px',\n                            borderRadius: '3px'\n                        }}>&nbsp;</div>\n                    }}\n                    valueTemplate={() => {\n                        if (!item.isCustomTeamColor && !item.teamColor || item.isCustomTeamColor) {\n                            return <div><p>{\"Team Color\"}</p></div>\n                        }\n\n                        return <div style={{\n                            background: item.teamColor,\n                            borderRadius: '3px',\n                            color: 'black',\n                            textAlign: \"left\"\n                        }}><p className=\"ml-2\">Team Color</p></div>\n                    }}\n                />\n            </div>\n            {\n                item.isCustomTeamColor && (\n                    <div className=\"col-1 md:col-1 flex justify-content-center\">\n                        <ColorPicker id=\"colorPicker\" hidden={!item.isCustomTeamColor}\n                                     value={item.teamColor.charAt(0) === '#' ? item.teamColor : defaultColorPickerColor}\n                                     style={{marginTop: '.3rem'}} onChange={(e) => {\n                            onUpdate(\"teamColor\", `#${e.value}`)\n                        }}></ColorPicker>\n                    </div>\n                )\n            }\n            <div className=\"col-12 md:col-1 flex justify-content-center\">\n                <Button className=\"p-button-danger p-button-icon-only\" icon=\"pi pi-trash\" onClick={() => {\n                    onDelete()\n                }} disabled={!deletable}/>\n            </div>\n        </div>\n    );\n}\n"
}